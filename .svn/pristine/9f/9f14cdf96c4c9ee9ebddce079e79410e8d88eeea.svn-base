package com.ceyi.project.dcjewelry.admin.article;

import com.ceyi.project.dcjewelry.admin.DatatablesPage;
import com.ceyi.project.dcjewelry.article.*;
import com.ceyi.project.dcjewelry.picture.PictureService;
import com.ceyi.project.dcjewelry.upload.UploadService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import pw.wecode.project.framework.jdbc.Page;
import pw.wecode.project.framework.utils.StringUtils;
import pw.wecode.project.framework.web.Result;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Created by lingh on 2017/4/3.
 */
@Controller("AdminArticleController")
@RequestMapping("/admin/article/")
public class ArticleController {
    @Inject
    private ArticleService articleService;
    @Inject
    private ArticleCategoryService articleCategoryService;
    @Inject
    private PictureService pictureService;
    @Inject
    private UploadService uploadService;

    @RequestMapping("create")
    public ModelAndView create(@RequestParam(value = "id", required = false) Integer id) {
        ModelAndView mav = new ModelAndView("admin/article/create");
        if (id != null && id > 0) {
            mav.addObject("article", articleService.get(id));
        }
        mav.addObject("watermarks", pictureService.getAllWatermark());
        mav.addObject("topCategories", articleCategoryService.getTopCategory().values());
        return mav;
    }
    @RequestMapping("imgCreate")
    public ModelAndView imgCreate(@RequestParam(value = "id", required = false) Integer id) {
        ModelAndView mav = new ModelAndView("admin/article/imgCreate");
        if (id != null && id > 0) {
            mav.addObject("article", articleService.get(id));
        }
        mav.addObject("watermarks", pictureService.getAllWatermark());
        mav.addObject("topCategories", articleCategoryService.getTopCategoryOnImg().values());
        return mav;
    }
    @RequestMapping("index")
    public String index() {
        return "admin/article/index";
    }
    @RequestMapping("pic")

    public String pic() {
        return "admin/article/pic";
    }

    @ResponseBody
    @RequestMapping("delete")
    public Result delete(@RequestParam("ids[]") int[] ids) {
        if (ids == null || ids.length == 0) {
            return new Result();
        }
        for (int id : ids) {
            articleService.delete(id);
        }
        return new Result();
    }

    @ResponseBody
    @RequestMapping("tag")
    public Result tag(@RequestParam("ids[]") int[] ids, @RequestParam("tag") String tag) {
        if(Article.TAG_PUSH.equals(tag)){
            List<Article> articles = new ArrayList<Article>();
            for (int id : ids) {
                Article article = articleService.get(id);
                if (article == null)
                    return new Result(Result.CODE_ERROR, "资讯不存在");
                if(article.getTags().equals("") || article.getTags() == null)
                    return new Result(Result.CODE_ERROR, "有资讯无推送标签，请重新选择");
                articles.add(article);
            }
            articleService.pushArticle(articles);
        }else {
            for (int id : ids) {
                Article article = articleService.get(id);
                if (article == null) {
                    return new Result(Result.CODE_ERROR, "资讯不存在");
                }
                String[] tags = article.getTags().split(",");
                List<String> tagList = new ArrayList<>(Arrays.asList(tags));
                if (!tagList.contains(tag)) {
                    tagList.add(tag);
                    article.setTags("," + StringUtils.join(tagList) + ",");
                    articleService.save(article);
                }
            }
        }
        return new Result();
    }

    @ResponseBody
    @RequestMapping("untag")
    public Result untag(@RequestParam("ids[]") int[] ids, @RequestParam("tag") String tag) {
        for (int id : ids) {
            Article article = articleService.get(id);
            if (article == null) {
                return new Result(Result.CODE_ERROR, "资讯不存在");
            }
            List<String> tagList = StringUtils.split(article.getTags(), ",");
            tagList.remove(tag);
            article.setTags("," + StringUtils.join(tagList) + ",");
            articleService.save(article);
        }
        return new Result();
    }

    @RequestMapping("query")
    @ResponseBody
    public DatatablesPage<Article> query(ArticleSearchVo articleSearchVo,@RequestParam("type") int type) {
        Page page = new Page();
        if (articleSearchVo.getLength() > 0) {
            page.setPageSize(articleSearchVo.getLength());
        }
        if (articleSearchVo.getStart() > 0) {
            page.setPageNumber((articleSearchVo.getStart() + page.getPageSize() - 1) / page.getPageSize() + 1);
        }
        articleService.query(page,type);
        return new DatatablesPage<>(page);
    }

    @RequestMapping("view")
    public ModelAndView view(@RequestParam("id") int id) {
        ModelAndView mav = new ModelAndView("/admin/article/view");
        Article article = articleService.get(id);
        if (article != null) {
            mav.addObject("article", article);
            mav.addObject("pictures", pictureService.getByIds(article.getPictureIds()));
        }
        return mav;
    }

    @RequestMapping("category")
    public String category() {
        return "admin/article/category";
    }
    @RequestMapping("imgCategory")
    public String imgCategory() {
        return "admin/article/imgCategory";
    }

    @RequestMapping("queryCategory")
    @ResponseBody
    public DatatablesPage<ArticleCategory> queryCategory() {
        Page page = new Page(1, 1000);
        List<ArticleCategory> articleCategoryList = articleCategoryService.getAll();
        page.setRecordCount(articleCategoryList.size());
        page.setData(articleCategoryList);
        return new DatatablesPage<>(page);
    }

    //查询图库中心类别表
    @RequestMapping("queryImgCategory")
    @ResponseBody
    public DatatablesPage<ArticleCategory> queryImgCategory() {
        Page page = new Page(1, 1000);
        List<ArticleCategory> articleCategoryList = articleCategoryService.getAllImg();
        page.setRecordCount(articleCategoryList.size());
        page.setData(articleCategoryList);
        return new DatatablesPage<>(page);
    }

    @ResponseBody
    @RequestMapping("queryTopCategory")
    public List<ArticleCategory> queryTopCategory() {
        return new ArrayList<>(articleCategoryService.getTopCategory().values());
    }

    @ResponseBody
    @RequestMapping("saveCategory")
    public Result saveCategory(ArticleCategory articleCategory, @RequestParam(value = "file", required = false) MultipartFile file) {
        if (articleCategory.getId() > 0) {
            ArticleCategory old = articleCategoryService.get(articleCategory.getId());
            if (old == null) {
                return new Result(Result.CODE_ERROR, "分类不存在, id=" + articleCategory.getId());
            }
            articleCategory.setIcon(old.getIcon());
        }
        String icon = uploadService.upload(file);
        if (!StringUtils.hasText(icon) && !file.isEmpty()) {
            return new Result(Result.CODE_ERROR, "上传文件失败");
        }
        if (StringUtils.hasText(icon)) {
            articleCategory.setIcon(icon);
        }
        articleCategory.setType(0);
        articleCategoryService.save(articleCategory);
        return new Result();
    }
    //增加图库分类保存方法
    @ResponseBody
    @RequestMapping("saveImgCategory")
    public Result saveImgCategory(ArticleCategory articleCategory, @RequestParam(value = "file", required = false) MultipartFile file) {
        if (articleCategory.getId() > 0) {
            ArticleCategory old = articleCategoryService.get(articleCategory.getId());
            if (old == null) {
                return new Result(Result.CODE_ERROR, "分类不存在, id=" + articleCategory.getId());
            }
            articleCategory.setIcon(old.getIcon());
        }
        String icon = uploadService.upload(file);
        if (!StringUtils.hasText(icon) && !file.isEmpty()) {
            return new Result(Result.CODE_ERROR, "上传文件失败");
        }
        if (StringUtils.hasText(icon)) {
            articleCategory.setIcon(icon);
        }
        articleCategory.setType(1);
        articleCategoryService.save(articleCategory);
        return new Result();
    }

    @ResponseBody
    @RequestMapping("deleteCategory")
    public Result deleteCategory(@RequestParam("ids[]") int[] ids) {
        articleCategoryService.delete(ids);
        return new Result();
    }
}
